import os
import sys
import argparse
import json
from pathlib import Path
from typing import Dict, Any, Optional
from datetime import datetime
from dotenv import load_dotenv

from anthropic import Anthropic, APIConnectionError, RateLimitError, APIStatusError

DEFAULT_CONFIG = {
    "model": "claude-3-7-sonnet-20250219",
    "max_tokens": 20000,  # Increased from 4096 for longer notes
    "temperature": 1,
    "thinking": {
        "enabled": True,
        "budget_tokens": 16000  # Default thinking budget
    },
    "system_prompt": """Si profesion√°lny akademick√Ω pedag√≥g a odborn√≠k na tvorbu komplexn√Ωch, detailn√Ωch a zrozumiteƒæn√Ωch ≈°tudijn√Ωch materi√°lov pre vysoko≈°kolsk√Ωch ≈°tudentov. Tvoja √∫loha je transformova≈• predn√°≈°kov√Ω transkript na vysoko kvalitn√©, ≈°trukt√∫rovan√© pozn√°mky, ktor√© bud√∫:

1) OBSAHOVO KOMPLEXN√â:
   - Zachy≈• v≈°etky kƒæ√∫ƒçov√© koncepty, te√≥rie, defin√≠cie a pr√≠klady z predn√°≈°ky
   - Vysvetli zlo≈æit√© my≈°lienky jasn√Ωm a zrozumiteƒæn√Ωm sp√¥sobom
   - Kde je to relevantn√©, oboha≈• pozn√°mky o dodatoƒçn√Ω kontext potrebn√Ω pre pln√© pochopenie t√©my
   - Nevynech√°vaj ≈æiadne podstatn√© inform√°cie, no z√°rove≈à odfiltruj zbytoƒçn√© opakovania

2) LOGICKY ≈†TRUKT√öROVAN√â:
   - Vytvor jasn√∫ hierarchiu inform√°ci√≠ s hlavn√Ωmi t√©mami, podt√©mami a podporn√Ωmi bodmi
   - Pou≈æ√≠vaj konzistentn√© nadpisy, podnadpisy a odr√°≈æky pre prehƒæadnos≈•
   - Vizu√°lne oddeƒæuj sekcie pre ƒæah≈°iu orient√°ciu a lep≈°ie zapam√§tanie
   - Zoraƒè inform√°cie logicky, aby vytvorili s√∫visl√Ω narat√≠v

3) LINGVISTICKY SPR√ÅVNE A KONZISTENTN√â:
   - Pou≈æ√≠vaj akademicky korektn√∫ slovenƒçinu s d√¥razom na odborn√∫ terminol√≥giu
   - Oprav v≈°etky gramatick√©, pravopisn√© a ≈°tylistick√© chyby, ktor√© sa nach√°dzaj√∫ v transkripte
   - Dodr≈æuj pravidl√° slovensk√©ho pravopisu vr√°tane spr√°vnej interpunkcie, diakritiky a veƒæk√Ωch p√≠smen
   - Ak sa v transkripte nach√°dza nejasn√© alebo nezrozumiteƒæn√© slovo/fr√°za, pok√∫s sa odvodi≈• spr√°vny v√Ωznam z kontextu alebo z tvojich existuj√∫cich znalost√≠ danej t√©my

4) PEDAGOGICKY EFEKT√çVNE:
   - Zv√Ωraz≈àuj kƒæ√∫ƒçov√© my≈°lienky pomocou grafick√Ωch prvkov (tuƒçn√© p√≠smo, kurz√≠va, podƒçiarknutie)
   - Vyu≈æ√≠vaj r√¥zne typy zoznamov (ƒç√≠slovan√©, odr√°≈ækov√©) pre r√¥zne typy inform√°ci√≠
   - Ak je to vhodn√©, vytv√°raj tabuƒæky, sch√©my alebo diagramy na vizualiz√°ciu vz≈•ahov medzi konceptmi
   - Formuluj a pridaj kontroln√© ot√°zky na konci ka≈ædej hlavnej sekcie pre reflexiu a sebahodnotenie

Transkript m√¥≈æe obsahova≈• gramatick√© chyby, preru≈°en√© my≈°lienky, opakovanie alebo slov√°, ktor√© ned√°vaj√∫ zmysel. Je tvojou √∫lohou interpretova≈• ich spr√°vne a vytvori≈• text, ktor√Ω bude zrozumiteƒæn√Ω aj pre ≈°tudenta, ktor√Ω sa s danou t√©mou stret√°va po prv√Ωkr√°t. Tvoj√≠m cieƒæom je vytvori≈• materi√°l, ktor√Ω by mohol sl√∫≈æi≈• ako samostatn√° ≈°tudijn√° pom√¥cka bez potreby dodatoƒçn√Ωch zdrojov.

V√Ωsledn√© pozn√°mky by mali by≈• p√≠san√© tak, aby boli okam≈æite pou≈æiteƒæn√© pre ≈°t√∫dium a mali form√°t profesion√°lneho ≈°tudijn√©ho materi√°lu, ktor√Ω by mohla vyda≈• renomovan√° akademick√° in≈°tit√∫cia.""",
    "user_prompt_template": "Pros√≠m, vytvor detailn√© a komplexn√© vysoko≈°kolsk√© pozn√°mky z nasleduj√∫ceho transkriptu predn√°≈°ky. V≈°imni si, ≈æe transkript m√¥≈æe obsahova≈• gramatick√© chyby alebo preru≈°en√© my≈°lienky - oprav ich a vytvor zrozumiteƒæn√Ω, koherentn√Ω ≈°tudijn√Ω materi√°l:\n\n{transcript}"
}

class TranscriptProcessor:
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.api_key = os.environ.get("ANTHROPIC_API_KEY")
        if not self.api_key:
            raise ValueError("‚ùå Ch√Ωba premenn√° prostredia ANTHROPIC_API_KEY. Nastav ju pr√≠kazom: export ANTHROPIC_API_KEY=tvoj_kluc")
        
        self.client = Anthropic(api_key=self.api_key)
    
    def read_transcript(self, file_path: str) -> str:
        """Naƒç√≠ta transkript zo ≈°pecifikovan√©ho s√∫boru."""
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                return file.read()
        except FileNotFoundError:
            raise FileNotFoundError(f"‚ùå S√∫bor s transkriptom nebol n√°jden√Ω: {file_path}")
        except Exception as e:
            raise IOError(f"‚ùå Chyba pri ƒç√≠tan√≠ s√∫boru s transkriptom: {str(e)}")
    
    def process_transcript(self, transcript: str, output_file: Optional[str] = None) -> None:
        """Spracuje transkript pomocou Claude API so streamovan√Ωm v√Ωstupom a thinking."""
        user_prompt = self.config["user_prompt_template"].format(transcript=transcript)
        
        # Prepare API parameters
        api_params = {
            "model": self.config["model"],
            "max_tokens": self.config["max_tokens"],
            "temperature": self.config["temperature"],
            "system": self.config["system_prompt"],
            "messages": [
                {"role": "user", "content": user_prompt}
            ],
            "stream": True
        }
        
        # Add thinking parameters if enabled
        if self.config["thinking"]["enabled"]:
            thinking_budget = self.config["thinking"]["budget_tokens"]
            
            # Ensure thinking budget is at least 1024 tokens
            if thinking_budget < 1024:
                thinking_budget = 1024
                print("‚ö†Ô∏è Thinking budget increased to minimum required 1024 tokens")
            
            # Ensure thinking budget is less than max_tokens
            if thinking_budget >= self.config["max_tokens"]:
                thinking_budget = self.config["max_tokens"] - 1024
                print(f"‚ö†Ô∏è Thinking budget reduced to {thinking_budget} to be less than max_tokens")
            
            api_params["thinking"] = {
                "budget_tokens": thinking_budget
            }
        
        try:
            print("\nüîÑ Spracov√°vam transkript pomocou Claude...\n")
            print("-" * 80 + "\n")
            
            # Create full response collector
            full_response = ""
            thinking_content = ""
            final_response = ""
            
            # Process the stream
            with self.client.messages.create(**api_params) as stream:
                # Track current block type
                current_block_type = None
                
                # Process each chunk as it arrives
                for chunk in stream:
                    # Handle content block start events
                    if chunk.type == "content_block_start":
                        block_type = chunk.content_block.type
                        current_block_type = block_type
                        
                        if block_type == "thinking":
                            print("üß† Claude rozm√Ω≈°ƒæa...")
                        elif block_type == "redacted_thinking":
                            print("üß† Claude rozm√Ω≈°ƒæa (ƒças≈• √∫vah je skryt√° z bezpeƒçnostn√Ωch d√¥vodov)...")
                        elif block_type == "text":
                            print("\nüìù Generujem pozn√°mky:\n")
                    
                    # Handle content block delta events
                    elif chunk.type == "content_block_delta":
                        if chunk.delta.type == "text_delta":
                            text = chunk.delta.text
                            
                            # Add to specific collector based on block type
                            if current_block_type == "thinking":
                                thinking_content += text
                            elif current_block_type == "redacted_thinking":
                                # Just count it as thinking content
                                thinking_content += "[redacted]"
                            elif current_block_type == "text":
                                # Print text from text blocks to console and add to final response
                                sys.stdout.write(text)
                                sys.stdout.flush()
                                final_response += text
                    
                    # Handle message stop events
                    elif chunk.type == "message_stop":
                        # Track token usage for monitoring/billing
                        usage = chunk.message.usage
                        token_info = (
                            f"\n\n------\n"
                            f"Tokeny: vstup={usage.input_tokens}, v√Ωstup={usage.output_tokens}, "
                            f"z ƒçoho my≈°lienky={len(thinking_content) // 4}"  # Rough token estimation
                        )
                        print(token_info)
                        full_response = final_response + token_info
                
                print("\n" + "-" * 80)
                
                # Save to file if requested
                if output_file:
                    with open(output_file, 'w', encoding='utf-8') as file:
                        file.write(full_response)
                    print(f"\n‚úÖ Pozn√°mky ulo≈æen√© do: {output_file}")
                    print(f"   Veƒækos≈• s√∫boru: {os.path.getsize(output_file) / 1024:.2f} KB")
        
        except APIConnectionError as e:
            print(f"‚ùå Chyba pripojenia: {e.__cause__}")
            print("   Skontroluj svoje internetov√© pripojenie a sk√∫s to znova.")
        
        except RateLimitError:
            print("‚ùå Prekroƒçen√Ω limit API. Sk√∫s to znova nesk√¥r alebo zn√≠≈æ frekvenciu po≈æiadaviek.")
        
        except APIStatusError as e:
            print(f"‚ùå API chyba ({e.status_code}): {e.response}")
        
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è Proces preru≈°en√Ω pou≈æ√≠vateƒæom.")
        
        except Exception as e:
            print(f"‚ùå Neoƒçak√°van√° chyba: {type(e).__name__}: {e}")


def main():
    parser = argparse.ArgumentParser(description="Spracovanie predn√°≈°kov√Ωch transkriptov pomocou Claude AI pre vytvorenie profesion√°lnych pozn√°mok")
    
    parser.add_argument("--transcript", "-t", type=str, help="Cesta k s√∫boru s transkriptom (predvolen√©: najnov≈°√≠ v prieƒçinku output_files)")
    parser.add_argument("--output", "-o", type=str, help="V√Ωstupn√Ω s√∫bor pre pozn√°mky (predvolen√©: poznamky_<p√¥vodn√Ω_n√°zov_s√∫boru>)")
    parser.add_argument("--model", type=str, help=f"Claude model na pou≈æitie (predvolen√©: {DEFAULT_CONFIG['model']})")
    parser.add_argument("--temperature", type=float, help=f"Teplota pre generovanie (predvolen√©: {DEFAULT_CONFIG['temperature']})")
    parser.add_argument("--max-tokens", type=int, help=f"Maxim√°lny poƒçet tokenov pre odpoveƒè (predvolen√©: {DEFAULT_CONFIG['max_tokens']})")
    parser.add_argument("--thinking-budget", type=int, help=f"Budget tokenov pre thinking (predvolen√©: {DEFAULT_CONFIG['thinking']['budget_tokens']})")
    parser.add_argument("--no-thinking", action="store_true", help="Vypn√∫≈• thinking m√≥d")
    parser.add_argument("--config", "-c", type=str, help="Cesta k JSON konfiguraƒçn√©mu s√∫boru s vlastn√Ωmi nastaveniami")

    load_dotenv()
    
    args = parser.parse_args()
    
    # Start with default config
    config = DEFAULT_CONFIG.copy()
    # Create a deep copy of the thinking config
    config["thinking"] = DEFAULT_CONFIG["thinking"].copy()
    
    # Override with config file if provided
    if args.config:
        try:
            with open(args.config, 'r', encoding='utf-8') as file:
                file_config = json.load(file)
                
                # Handle nested thinking config
                if "thinking" in file_config:
                    config["thinking"].update(file_config.pop("thinking", {}))
                
                # Update the rest of the config
                config.update(file_config)
                
            print(f"üìÑ Naƒç√≠tan√° konfigur√°cia zo s√∫boru: {args.config}")
        except Exception as e:
            print(f"‚ùå Chyba pri naƒç√≠tan√≠ konfiguraƒçn√©ho s√∫boru: {str(e)}")
            return
    
    # Override with command line arguments
    if args.model:
        config["model"] = args.model
    if args.temperature is not None:
        config["temperature"] = args.temperature
    if args.max_tokens:
        config["max_tokens"] = args.max_tokens
    if args.thinking_budget:
        config["thinking"]["budget_tokens"] = args.thinking_budget
    if args.no_thinking:
        config["thinking"]["enabled"] = False
    
    # Find transcript file if not specified
    transcript_path = args.transcript
    if not transcript_path:
        output_dir = Path("output_files")
        if not output_dir.exists() or not output_dir.is_dir():
            print(f"‚ùå Prieƒçinok nebol n√°jden√Ω: {output_dir}")
            return
        
        transcript_files = list(output_dir.glob("*.txt"))
        if not transcript_files:
            print(f"‚ùå V prieƒçinku {output_dir} neboli n√°jden√© ≈æiadne transkript s√∫bory")
            return
        
        # Get the most recently modified file
        transcript_path = str(max(transcript_files, key=lambda p: p.stat().st_mtime))
        print(f"üìÑ Pou≈æ√≠vam najnov≈°√≠ transkript: {transcript_path}")
    
    # Determine output file if not specified
    output_file = args.output
    if not output_file:
        transcript_filename = Path(transcript_path).stem
        timestamp = datetime.now().strftime("%Y%m%d_%H%M")
        output_file = f"poznamky_{transcript_filename}_{timestamp}.md"
    
    # Display configuration
    print("\nüìã Konfigur√°cia:")
    print(f"   Model: {config['model']}")
    print(f"   Teplota: {config['temperature']}")
    print(f"   Max tokenov: {config['max_tokens']}")
    
    if config["thinking"]["enabled"]:
        print(f"   Thinking: Zapnut√Ω (budget: {config['thinking']['budget_tokens']} tokenov)")
    else:
        print(f"   Thinking: Vypnut√Ω")
    
    print(f"   V√Ωstupn√Ω s√∫bor: {output_file}")
    print()
        
    # Process the transcript
    processor = TranscriptProcessor(config)
    try:
        transcript = processor.read_transcript(transcript_path)
        print(f"üìä Veƒækos≈• transkriptu: {len(transcript)} znakov")
        processor.process_transcript(transcript, output_file)
    except Exception as e:
        print(f"‚ùå Chyba: {str(e)}")


if __name__ == "__main__":
    main()